// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/meeting/end": {
            "post": {
                "description": "Ends a meeting based on the provided DTO",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meetings"
                ],
                "summary": "End a meeting",
                "parameters": [
                    {
                        "description": "End Meeting DTO",
                        "name": "meeting",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.EndMeetingDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Meeting details after operation",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid data or DTO type",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "405": {
                        "description": "Method not allowed (only POST supported)",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/meeting/start": {
            "post": {
                "description": "Starts a meeting based on the provided DTO",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meetings"
                ],
                "summary": "Start a meeting",
                "parameters": [
                    {
                        "description": "Start Meeting DTO",
                        "name": "meeting",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.StartMeetingDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Meeting details after operation",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid data or DTO type",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "405": {
                        "description": "Method not allowed (only POST supported)",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.EndMeetingDTO": {
            "type": "object",
            "required": [
                "meetingID",
                "members"
            ],
            "properties": {
                "meetingID": {
                    "description": "Meeting unique identifier (UUIDv4)\nrequired: true",
                    "type": "string"
                },
                "members": {
                    "description": "Members who participated in the meeting (minimum 2)\nrequired: true",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                        "$ref": "#/definitions/dto.UserDTO"
                    }
                }
            }
        },
        "dto.StartMeetingDTO": {
            "type": "object",
            "required": [
                "members"
            ],
            "properties": {
                "members": {
                    "description": "Members participating in the meeting (minimum 2)\nrequired: true",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                        "$ref": "#/definitions/dto.UserDTO"
                    }
                }
            }
        },
        "dto.UserDTO": {
            "type": "object",
            "required": [
                "firstName",
                "id",
                "lastName"
            ],
            "properties": {
                "avatarURL": {
                    "description": "URL to the user's avatar image\nrequired: false",
                    "type": "string"
                },
                "firstName": {
                    "description": "User's first name\nrequired: true",
                    "type": "string",
                    "minLength": 2
                },
                "id": {
                    "description": "User unique identifier (UUIDv4)\nrequired: true",
                    "type": "string"
                },
                "lastName": {
                    "description": "User's last name\nrequired: true",
                    "type": "string",
                    "minLength": 2
                }
            }
        },
        "response.Response": {
            "description": "Standard API response format containing message, data, and success status",
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data contains the response payload (optional)"
                },
                "message": {
                    "description": "Message contains the response message",
                    "type": "string"
                },
                "success": {
                    "description": "Success indicates whether the operation was successful",
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "default localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Meeting Scheduler API",
	Description:      "Serivce to requesting meetings in .tutora",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
