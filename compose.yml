services:
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_UI_PORT}:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tutora_net

  # voice_webrtc_service_app:
  #   container_name: voice_webrtc_service
  #   build:
  #     context: ./meeting/voice-webrtc
  #     dockerfile: ./Dockerfile
  #   ports:
  #     - "8004:8004"
  #   env_file:
  #     - ./meeting/voice-webrtc/.env
  #   networks:
  #     - tutora_net

  meeting_scheduler_service_app:
    container_name: meeting_scheduler_service
    build:
      context: ./meeting/meeting-scheduler-service
      dockerfile: ./Dockerfile
    ports:
      - "8003:8003"
    env_file:
      - ./meeting/meeting-scheduler-service/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      meeting_scheduler_service_db:
        condition: service_healthy
      meeting_scheduler_service_cache:
        condition: service_healthy
    networks:
      - tutora_net

  chat_service_app:
    container_name: chat_service
    build:
      context: ./meeting/chat-service
      dockerfile: ./Dockerfile
    ports:
      - "8002:8002"
    env_file:
      - ./meeting/chat-service/.env
    depends_on:
      - rabbitmq
      - chat_service_db
      - user_service_app
    networks:
      - tutora_net

  chat_service_db:
    image: mongo:latest
    container_name: chat_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tutora_net

  board-service:
    container_name: board-service
    build:
      context: ./meeting/board-service
      dockerfile: ./Dockerfile
    ports:
      - "8001:8001"
    env_file:
      - ./meeting/board-service/.env
    depends_on:
      - board-db
    networks:
      - tutora_net

  board-db:
    image: mongo
    container_name: board_db
    ports:
      - "27018:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tutora_net

  user_service_app:
    container_name: user-service
    build:
      context: ./account/user-service
      dockerfile: Dockerfile
    ports:
      - "${USER_SERVICE_PORT}:8080"
    env_file:
      - ./account/user-service/.env
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}

    depends_on:
      user_service_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - tutora_net

  user_service_db:
    image: postgres:16
    container_name: user_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tutora_net

  class_service_app:
    container_name: class_service
    build:
      context: ./account/class-service
      dockerfile: Dockerfile
    ports:
      - "${CLASS_SERVICE_PORT}:8080"
    env_file:
      - ./account/class-service/.env
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${CLASS_POSTGRES_HOST}:5432/${CLASS_POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${CLASS_POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${CLASS_POSTGRES_PASSWORD}

    depends_on:
      class_service_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      user_service_app:
        condition: service_started
    networks:
      - tutora_net

  class_service_db:
    image: postgres:16
    container_name: class_db
    environment:
      POSTGRES_DB: ${CLASS_POSTGRES_DB}
      POSTGRES_USER: ${CLASS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${CLASS_POSTGRES_PASSWORD}
    ports:
      - "${CLASS_POSTGRES_PORT}:5432"
    volumes:
      - pgdata_class:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CLASS_POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tutora_net

  meeting_scheduler_service_cache:
    container_name: meeting_scheduler_cache
    image: redis:6.2-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - cache:/data
    networks:
      - tutora_net

  meeting_scheduler_service_db:
    container_name: meeting_scheduler_db
    image: postgres:16
    environment:
      POSTGRES_DB: ${SCHEDULER_POSTGRES_DB}
      POSTGRES_USER: ${SCHEDULER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${SCHEDULER_POSTGRES_PASSWORD}
    ports:
      - "${SCHEDULER_POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SCHEDULER_POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tutora_net

  notification_service_db:
    image: mongo:latest
    container_name: notification_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27019:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tutora_net

  notification_service:
    build:
      context: ./alerts/notification-service/
      dockerfile: Dockerfile
    container_name: notification_service
    env_file:
      - ./alerts/notification-service/.env
    ports:
      - "8888:8888"
    depends_on:
      notification_service_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - tutora_net

  ws_gateway:
    build:
      context: ./meeting/ws-gateway/
      dockerfile: Dockerfile
    container_name: ws_gateway
    env_file:
      - ./meeting/ws-gateway/.env
    ports:
      - "8010:8010"
    depends_on:
      meeting_scheduler_service_cache:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - tutora_net

volumes:
  pgdata:
  pgdata_class:
  cache:
    driver: local

networks:
  tutora_net:
    driver: bridge
