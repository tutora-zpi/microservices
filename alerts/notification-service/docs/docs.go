// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/notification": {
            "get": {
                "description": "Paginated reponse adjusted for infinite scroll",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "List with user's notifications",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of notifications to display, limit range (0, 20] if number is invalid then limit is set to 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ID of the last notification for pagination, not required during first fetch.",
                        "name": "last_notification_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification's data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/server.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.NotificationDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Missing user id",
                        "schema": {
                            "$ref": "#/definitions/server.Response"
                        }
                    },
                    "404": {
                        "description": "No notifications yet",
                        "schema": {
                            "$ref": "#/definitions/server.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Removes one or more notifications for a given user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Deletes notifications",
                "parameters": [
                    {
                        "description": "IDs of notifications to delete",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteNotificationsDTO"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid body or Missing user id",
                        "schema": {
                            "$ref": "#/definitions/server.Response"
                        }
                    },
                    "404": {
                        "description": "Notification not found",
                        "schema": {
                            "$ref": "#/definitions/server.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/notification/stream": {
            "get": {
                "description": "Server-Sent Events (SSE) stream for sending notifications in real-time.",
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Stream user notifications",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token for auth",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {}
            }
        }
    },
    "definitions": {
        "dto.DeleteNotificationsDTO": {
            "type": "object",
            "properties": {
                "ids": {
                    "description": "IDs notifications to remove\nrequired: true",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.NotificationDTO": {
            "type": "object",
            "properties": {
                "body": {
                    "description": "Description",
                    "type": "string"
                },
                "createdAt": {
                    "description": "Timestamp of creation time in seconds (unix)",
                    "type": "integer"
                },
                "id": {
                    "description": "Notification identificator",
                    "type": "string"
                },
                "metadata": {
                    "description": "Additional information which is unique for other notification types",
                    "type": "object",
                    "additionalProperties": {}
                },
                "receiver": {
                    "description": "Receiver informations",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UserDTO"
                        }
                    ]
                },
                "redirectionLink": {
                    "description": "A part of link used to navigate user after clicking notification",
                    "type": "string",
                    "example": "/meeting/some_id"
                },
                "sender": {
                    "description": "Sender informations",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UserDTO"
                        }
                    ]
                },
                "title": {
                    "description": "Title",
                    "type": "string"
                },
                "type": {
                    "description": "Type of notification system either invitation",
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.NotificationType"
                        }
                    ]
                }
            }
        },
        "dto.UserDTO": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                }
            }
        },
        "enums.NotificationType": {
            "type": "string",
            "enum": [
                "invitation",
                "system"
            ],
            "x-enum-varnames": [
                "INVITATION",
                "SYSTEM"
            ]
        },
        "server.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
